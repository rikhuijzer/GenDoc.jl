var documenterSearchIndex = {"docs":
[{"location":"gen_gettingstarted/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"The main purpose of GenDoc.jl is to provide users with lots of freedom when generating documents. Achieving this without this package is possible. A simple approach would be to generate a Markdown creating analysis.jl and writing","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"function fancy_analysis()\n    # Here some fancy analysis is executed.\n    return 4\nend\n\ntext = raw\"\n    --- \n    title: Analysis\n    ---\n\n    After a lot of research, I conclude that the average is $(fancy_analysis()).\n    \"\n\nio = open(\"analysis.md\", \"w\")\nwrite(io, text)\nclose(io)","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"which creates the file analysis.md containing","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"---\ntitle: Analysis\n---\n\nAfter a lot of research, I conclude that the average is 4.","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"After doing this for a few documents, the code will become quite repetitive. To avoid the repetition, we can use the following functions and macros.","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"DocTestSetup = :(using GenDoc)","category":"page"},{"location":"gen_gettingstarted/#Showing-code-blocks","page":"Getting started","title":"Showing code blocks","text":"","category":"section"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"To show the evaluted result with the code block, use @withcb. For example, inside a string, use","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"$(@withcb begin 1 + 1 end)","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"to obtain the following Markdown","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"```\n1 + 1\n```\n\n2","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"After the Markdown renderer, this looks like","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"1 + 1","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"2","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"This macro is used to show the next examples.","category":"page"},{"location":"gen_gettingstarted/#Plots","page":"Getting started","title":"Plots","text":"","category":"section"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"Plot are first stored as images and then referenced from the generated document. For R plots, use rplot","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"rplot","category":"page"},{"location":"gen_gettingstarted/#GenDoc.rplot","page":"Getting started","title":"GenDoc.rplot","text":"rplot(filename; path_prefix=nothing, uri_prefix=nothing, kwargs...)::String\n\nWrapper around the ggsave function from Tidyverse. Keyword arguments kwargs are passed to ggsave. Returns a string pointing to the image generated by ggsave. The image is created at path_prefix / filename. To avoid constantly passing path_prefix and url_prefix, consider creating a partial function.\n\n\n\n\n\n","category":"function"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"p = R\"\nlibrary(ggplot2)\nggplot(mpg, aes(displ, hwy)) + \ngeom_point()\n\"\npath_prefix = joinpath(GenDoc.project_root(), \"docs\", \"src\")\nrplot(\"gen_plot.png\"; path_prefix = path_prefix, width = 8, height = 4)","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"gen_gettingstarted/#Dataframes","page":"Getting started","title":"Dataframes","text":"","category":"section"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"df = DataFrame(study = [\"A\", \"B\"], result_1 = [3, 4])\njoin([md(df), pretty(df)], '\\n')","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"study result_1\nA 3\nB 4","category":"page"},{"location":"gen_gettingstarted/","page":"Getting started","title":"Getting started","text":"Study Result 1\nA 3\nB 4","category":"page"},{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [GenDoc]","category":"page"},{"location":"methods/#GenDoc.generate_front_matter-Tuple{}","page":"Methods","title":"GenDoc.generate_front_matter","text":"generate_front_matter(; kwargs...)\n\nGenerates YAML front matter based on given keyword arguments kwargs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.hspace","page":"Methods","title":"GenDoc.hspace","text":"hspace(h::Number)::String\nhspace(h=\"1cm\")::String\n\nHorizontal space as HTML. The unit of h::Number defaults to cm.\n\n\n\n\n\n","category":"function"},{"location":"methods/#GenDoc.is_gitlab_ci-Tuple{}","page":"Methods","title":"GenDoc.is_gitlab_ci","text":"is_gitlab_ci()::Bool\n\nReturn whether this project is being executed on GitLab's CI.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.md-Tuple{DataFrames.DataFrame}","page":"Methods","title":"GenDoc.md","text":"md(df::DataFrame)::String\n\nConvert DataFrame df to Markdown syntax.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.pretty-Tuple{DataFrames.DataFrame}","page":"Methods","title":"GenDoc.pretty","text":"pretty(df::DataFrame)::String\n\nMake header of df prettier, by capitalising the first letter and removing underscores.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.project_root-Tuple{}","page":"Methods","title":"GenDoc.project_root","text":"project_root()::String\n\nReturn the root directory of the project.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.rplot-Tuple{Any}","page":"Methods","title":"GenDoc.rplot","text":"rplot(filename; path_prefix=nothing, uri_prefix=nothing, kwargs...)::String\n\nWrapper around the ggsave function from Tidyverse. Keyword arguments kwargs are passed to ggsave. Returns a string pointing to the image generated by ggsave. The image is created at path_prefix / filename. To avoid constantly passing path_prefix and url_prefix, consider creating a partial function.\n\n\n\n\n\n","category":"method"},{"location":"methods/#GenDoc.@withcb-Tuple{Expr}","page":"Methods","title":"GenDoc.@withcb","text":"@withcb ex\n\nReturn the expression ex inside a Markdown code block and the output of eval(ex).\n\nSimilar to default behaviour of R Markdown code blocks.\n\n\n\n\n\n","category":"macro"},{"location":"#GenDoc.jl","page":"Introduction","title":"GenDoc.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"<p align=\"center\">\n    <img src=\"https://huijzer.xyz/images/GenDoc-crop.svg\">\n</p>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The aim of this project is to support users in generating documents. The source code is first converted into Markdown, which in turn can be converted to the following output formats","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"HTML (via Hugo or Julia Markdown),\nPDF (via LaTeX) or\nDoc (via Pandoc).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Since all the source files are directly called from within Julia, it is possible to generate multiple output files. For example, two HTML pages where the HTML pages use different citation styles.","category":"page"},{"location":"#Package-features","page":"Introduction","title":"Package features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Output R plots and DataFrames to HTML, see Getting started.","category":"page"}]
}
