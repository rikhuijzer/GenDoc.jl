var documenterSearchIndex = {"docs":
[{"location":"gen_gettingstarted/#Getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"The main purpose of GenDoc.jl is to provide users with lots of freedom when generating documents. Achieving this without this package is possible. A simple approach would be to generate a Markdown creating analysis.jl and writing","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"function fancy_analysis()\n    # Here some fancy analysis is executed.\n    return 4\nend\n\ntext = raw\"\n    --- \n    title: Analysis\n    ---\n\n    After a lot of research, I conclude that the average is $(fancy_analysis()).\n    \"\n\nio = open(\"analysis.md\", \"w\")\nwrite(io, text)\nclose(io)","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"which creates the file analysis.md containing","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"---\ntitle: Analysis\n---\n\nAfter a lot of research, I conclude that the average is 4.","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"After doing this for a few documents, the code will become quite repetitive. To avoid the repetition, we can use the following functions and macros.","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"DocTestSetup = :(using GenDoc)","category":"page"},{"location":"gen_gettingstarted/#Showing-code-blocks-1","page":"Getting started","title":"Showing code blocks","text":"","category":"section"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"To show the evaluted result with the code block, use @withcb. For example, inside a string, use","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"$(@withcb begin 1 + 1 end)","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"to obtain the following Markdown","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"```\n1 + 1\n```\n\n2","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"After the Markdown renderer, this looks like","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"1 + 1","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"2","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"This macro is used to show the next examples.","category":"page"},{"location":"gen_gettingstarted/#Plots-1","page":"Getting started","title":"Plots","text":"","category":"section"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"Plot are first stored as images and then referenced from the generated document. For R plots, use rplot","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"rplot","category":"page"},{"location":"gen_gettingstarted/#GenDoc.rplot","page":"Getting started","title":"GenDoc.rplot","text":"rplot(filename; path_prefix, uri_prefix, kwargs...)::String\n\nWrapper around the ggsave function from Tidyverse. Returns a string pointing to the image generated by ggsave. The image is created at path_prefix / filename. To avoid constantly passing path_prefix and url_prefix, consider creating a partial function.\n\n\n\n\n\n","category":"function"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"p = R\"\nlibrary(ggplot2)\nggplot(mpg, aes(displ, hwy)) + \ngeom_point()\n\"\npath_prefix = joinpath(project_root(), \"docs\", \"src\")\nrplot(\"gen_plot.png\"; path_prefix = path_prefix, width = 8, height = 4)","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"gen_gettingstarted/#Dataframes-1","page":"Getting started","title":"Dataframes","text":"","category":"section"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"df = DataFrame(A = [1, 2], B = [3, 4])\nmd(df)","category":"page"},{"location":"gen_gettingstarted/#","page":"Getting started","title":"Getting started","text":"A B\n1 3\n2 4","category":"page"},{"location":"#GenDoc-1","page":"GenDoc","title":"GenDoc","text":"","category":"section"},{"location":"#","page":"GenDoc","title":"GenDoc","text":"Documentation for GenDoc.","category":"page"},{"location":"#","page":"GenDoc","title":"GenDoc","text":"Modules = [GenDoc]","category":"page"},{"location":"#GenDoc.generate_front_matter-Tuple{}","page":"GenDoc","title":"GenDoc.generate_front_matter","text":"generate_front_matter(;kwargs...)\n\nGenerates YAML front matter based on given vars.\n\n\n\n\n\n","category":"method"},{"location":"#GenDoc.md-Tuple{DataFrames.DataFrame}","page":"GenDoc","title":"GenDoc.md","text":"md(df::DataFrame)\n\nConvert DataFrame to String.\n\n\n\n\n\n","category":"method"},{"location":"#GenDoc.rplot-Tuple{Any}","page":"GenDoc","title":"GenDoc.rplot","text":"rplot(filename; path_prefix, uri_prefix, kwargs...)::String\n\nWrapper around the ggsave function from Tidyverse. Returns a string pointing to the image generated by ggsave. The image is created at path_prefix / filename. To avoid constantly passing path_prefix and url_prefix, consider creating a partial function.\n\n\n\n\n\n","category":"method"},{"location":"#GenDoc.@withcb-Tuple{Expr}","page":"GenDoc","title":"GenDoc.@withcb","text":"@withcb ex\n\nReturns the output of the evaluated expression eval(ex) after the expression ex inside a Markdown code block. Returns the expression ex inside a Markdown code block and the output of eval(ex).\n\nSimilar to default behaviour of R Markdown code blocks.\n\nMacroTools.rmlines should help.\n\n\n\n\n\n","category":"macro"}]
}
