using DataFrames
using Dates
using RCall

import MacroTools

"""
    generate_front_matter(vars::Dict{String,String})

Generates YAML front matter based on given `vars`.
"""
function generate_front_matter(vars::Dict{String,String})::String
    if !("date" in keys(vars))
        vars["date"] = string(Dates.today())
    end

    as_line(key::String) = "$(key): $(vars[key])"
    lines = join(map(as_line, collect(keys(vars))), '\n')
    """
    ---
    $lines
    ---

    [//]: # (GENERATED FILE. DO NOT MODIFY.)

    """
end
export generate_front_matter

"""
    df2md(df::DataFrame)

Convert DataFrame to String.
"""
function df2md(df::DataFrame; show_header=true)::String
  row2str(row::DataFrameRow) = join(values(row), " | ")

  if show_header 
    header = join(names(df), " | ")
  else
    header = join(repeat([' '], ncol(df)), " | ")
  end
  subheader = join(repeat(["---"], ncol(df)), " | ")
  body = join(map(i -> row2str(df[i, :]), 1:nrow(df)), '\n')
  
  return """
  $header
  $subheader
  $body
  """
end
export df2md

"""
    rplot

Transform R plot `plot` object to string.
The plot will be stored at `path_prefix / filename`.
The string will point to an image generated by the R plot, located at `uri_prefix / filename`.

To avoid constantly passing `path_prefix` and `url_prefix`, consider using partial function application.
"""
function rplot(plot, filename, path_prefix, uri_prefix)::String
    im_path = joinpath(path_prefix, filename)
    R"ggsave(file=$im_path, plot=$plot)"
    uri_path = uri_prefix != nothing ? joinpath(uri_prefix, filename) : filename
    return "![]($uri_path)"
end
export rplot

function withcb_helper(ex::Expr)
    ex = MacroTools.rmlines(ex)
    ex = join(lstrip.(split(string(ex), '\n')[2:end-1]), '\n')
    """
    ```
    $(MacroTools.rmlines(ex))
    ```
    """
end

"""
    @withcb ex

Returns the output of the evaluated expression `eval(ex)` after the expression `ex` inside a Markdown code block.
Returns the expression `ex` inside a Markdown code block and the output of `eval(ex)`.

Similar to default behaviour of R Markdown code blocks.

MacroTools.rmlines should help.
"""
macro withcb(ex::Expr)
    # Note that `GenDoc.withcb_helper` is resolved in the macro call environment.
    return esc(:(string(
        $(GenDoc.withcb_helper(ex)), '\n',
        $(eval(ex))
    )))
end
export @withcb
